#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""ebooktoc

Usage:
  ebooktoc auto [options] <filename> [<output>]
  ebooktoc toc [options] <filename> <toc.txt> [<output>]
  ebooktoc pages [options] <filename> <pages.txt> [<output>]

Options:
  --interactive       Ask users to check for OCR errors (in auto mode)
  --no-toc            Disable table of contents generation (in auto mode)
  --no-repagination   Disable repagination (in auto mode)
  --no-cache          Disable caching (in auto mode)
  --debug             Show debugging information

Modes:
   auto:  The table of contents and the pages remapping are automatically generated by running OCR on the whole document.
   toc:   Replace the table of contents of the document by that provided in the file toc.txt.
          Every line of the latter should be of the form `level page Title`, see examples/toc.txt.
   pages: Replace the correspondence actual/display pages in the document by that provided in the file pages.txt.
          Every line of the latter should be of the form 'actual page: page number to display', e.g. "10: 5".
	  The page numbers are automatically interpolated.

If <output> is not specified, an attempt will be made to retrieve the book's metadata (from its ISBN) and base the filename on it. If this fails, the output filename will be the original filename suffixed by -out."""
from document import openDocument, Outline
from processor import DocumentProcessor
import utils

from docopt import docopt, DocoptExit
from termcolor import cprint
import logging
import progressbar

from pprint import pprint


def main():
    try:
        args = docopt(__doc__)
    except DocoptExit:
        print(__doc__)
        exit()
    filename = args["<filename>"]
    # Debug mode
    if args["--debug"]:
        logging.basicConfig(level=logging.DEBUG)
    # Open document
    try:
        doc = openDocument(filename)
    except Exception as e:
        cprint("Error opening file", "red")
        print(e)
        exit(1)
    outline = None
    pages = None
    if args["auto"]:
        cprint("Analyzing document...", "green", attrs=["bold"])
        # Progress bar
        bar = progressbar.ProgressBar(max_value=doc.numberPages())
        bar.start()
        bar.update(0)
        # Process
        proc = DocumentProcessor(doc)
        proc.process(lambda x: progress(bar, x), not args["--no-cache"])
        outline = proc.getOutline()
        if args["--interactive"]:        
            outline.edit()
        pages = proc.getPages()
        # End of processing
        bar.finish()
    elif args["toc"]:
        outline = Outline()
        try:
            with open(args["<toc.txt>"], "r", encoding="utf-8") as f:
                outline.fromString(f.read())
        except Exception as e:
            print(e)
            cprint("Error openin or processing table of contents file {}".format(args["<toc.txt>"]), "red")
            exit(1)
    elif args["pages"]:
        try:
            with open(args["<pages.txt>"], "r") as f:
                pages = f.readlines()
                pages = [[int(pp.strip()) for pp in p.split(":")] for p in pages]
                pages = {p[0] : p[1] for p in pages}
                print(pages)
        except:
            cprint("Error openin or processing pages file {}".format(args["<pages.txt>"]), "red")
            exit(1)
    # Repaginate
    if args["pages"] or (args["auto"] and not args["--no-repagination"]):
        cprint("Repaginating document...", "green", attrs=["bold"])
        doc.repaginate(pages)
    # TOC
    if args["toc"] or (args["auto"] and not args["--no-toc"]):
        cprint("Adding table of contents...", "green", attrs=["bold"])
        doc.writeOutline(outline)
    # Determine output filename
    if args["<output>"] is None:
        s = filename.split(".")
        try:
            args["<output>"] = ".".join([proc.getFilename(), s[-1]])
        except:
            args["<output>"] = ".".join(s[:-1]) + "-out." + s[-1]
    # Write output
    cprint("Writing output...", "green", attrs=["bold"])
    doc.write(args["<output>"])
    print("Wrote {}".format(args["<output>"]))

def progress(bar, v=None):
    if v is None:
        bar.update(bar.value + 1)
    else:
        bar.update(v)            
    return

if __name__ == '__main__':
    main()


